<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <!-- Template for Dashboard with Real-time Timer -->
    <template id="dashboard_timer_template" name="Kids Dashboard Timer">
        <script type="text/javascript">
            // Real-time Dashboard Timer
            (function() {
                'use strict';
                
                let timerInterval = null;
                
                function startDashboardTimer() {
                    // Clear any existing timer
                    if (timerInterval) {
                        clearInterval(timerInterval);
                    }
                    
                    console.log('Kids Dashboard Timer: Starting...');
                    
                    // Update every 100ms for smooth millisecond display
                    timerInterval = setInterval(function() {
                        updateAllTimers();
                    }, 100);
                }
                
                function updateAllTimers() {
                    const rows = document.querySelectorAll('.o_data_row');
                    
                    rows.forEach(function(row) {
                        const checkinCell = row.querySelector('td[name="checkin_time"]');
                        const timerCell = row.querySelector('td[name="live_timer"]');
                        const extraMinutesCell = row.querySelector('td[name="extra_minutes"]');
                        
                        if (checkinCell && timerCell) {
                            const checkinText = checkinCell.textContent.trim();
                            if (checkinText) {
                                const checkinTime = parseCheckinTime(checkinText);
                                if (checkinTime) {
                                    const now = new Date();
                                    const duration = now - checkinTime;
                                    
                                    // Calculate countdown/positive format
                                    const formatted = calculateCountdownFormat(duration);
                                    
                                    // Update timer display
                                    timerCell.textContent = formatted;
                                    
                                    // Apply styling
                                    timerCell.style.fontFamily = 'monospace';
                                    timerCell.style.fontWeight = 'bold';
                                    timerCell.style.textAlign = 'center';
                                    timerCell.style.minWidth = '120px';
                                    
                                    // Color coding based on timer format
                                    if (formatted.startsWith('-')) {
                                        // Countdown time (still in free time)
                                        timerCell.style.color = '#28a745'; // Green
                                        timerCell.style.animation = 'none';
                                    } else if (formatted.startsWith('+')) {
                                        // Extra time
                                        const extraMinutes = extraMinutesCell ? parseInt(extraMinutesCell.textContent.trim()) || 0 : 0;
                                        if (extraMinutes <= 10) {
                                            timerCell.style.color = '#ffc107'; // Yellow
                                            timerCell.style.animation = 'none';
                                        } else {
                                            timerCell.style.color = '#dc3545'; // Red
                                            timerCell.style.animation = 'pulse 1s infinite';
                                        }
                                    } else {
                                        // Default styling
                                        timerCell.style.color = '#6c757d'; // Gray
                                        timerCell.style.animation = 'none';
                                    }
                                }
                            }
                        }
                    });
                }
                
                function parseCheckinTime(timeStr) {
                    try {
                        const clean = timeStr.replace(/\s+/g, ' ').trim();
                        let date = new Date(clean);
                        
                        if (isNaN(date.getTime())) {
                            // Try DD/MM/YYYY HH:MM:SS format
                            const parts = clean.match(/(\d{2})\/(\d{2})\/(\d{4})\s+(\d{2}):(\d{2}):(\d{2})/);
                            if (parts) {
                                const [, day, month, year, hour, minute, second] = parts;
                                date = new Date(year, month - 1, day, hour, minute, second);
                            }
                        }
                        
                        return isNaN(date.getTime()) ? null : date;
                    } catch (e) {
                        return null;
                    }
                }
                
                function calculateCountdownFormat(durationMs) {
                    // Default allowed time: 60 minutes (can be made dynamic later)
                    const allowedMinutes = 60; // This should ideally come from subscription data
                    const allowedMs = allowedMinutes * 60 * 1000;
                    
                    const totalSec = Math.floor(durationMs / 1000);
                    const allowedSec = Math.floor(allowedMs / 1000);
                    
                    let displaySec, prefix;
                    
                    if (totalSec <= allowedSec) {
                        // Still within allowed time - show countdown
                        displaySec = allowedSec - totalSec;
                        prefix = '-';
                    } else {
                        // Over allowed time - show extra time
                        displaySec = totalSec - allowedSec;
                        prefix = '+';
                    }
                    
                    const hours = Math.floor(displaySec / 3600);
                    const minutes = Math.floor((displaySec % 3600) / 60);
                    const seconds = displaySec % 60;
                    
                    return prefix + hours.toString().padStart(2, '0') + ':' + 
                           minutes.toString().padStart(2, '0') + ':' + 
                           seconds.toString().padStart(2, '0');
                }
                
                function formatTimeWithSign(ms, isOvertime) {
                    const totalSec = Math.floor(ms / 1000);
                    
                    const hours = Math.floor(totalSec / 3600);
                    const minutes = Math.floor((totalSec % 3600) / 60);
                    const seconds = totalSec % 60;
                    
                    const timeStr = hours.toString().padStart(2, '0') + ':' + 
                                   minutes.toString().padStart(2, '0') + ':' + 
                                   seconds.toString().padStart(2, '0');
                    
                    // Note: The actual +/- logic is handled by the Python backend
                    // This function just formats the display consistently
                    return timeStr;
                }
                
                function formatDurationWithMs(ms) {
                    const totalSec = Math.floor(ms / 1000);
                    const centisec = Math.floor((ms % 1000) / 10);
                    
                    const hours = Math.floor(totalSec / 3600);
                    const minutes = Math.floor((totalSec % 3600) / 60);
                    const seconds = totalSec % 60;
                    
                    if (hours > 0) {
                        return hours.toString().padStart(2, '0') + ':' + 
                               minutes.toString().padStart(2, '0') + ':' + 
                               seconds.toString().padStart(2, '0') + '.' + 
                               centisec.toString().padStart(2, '0');
                    } else {
                        return minutes.toString().padStart(2, '0') + ':' + 
                               seconds.toString().padStart(2, '0') + '.' + 
                               centisec.toString().padStart(2, '0');
                    }
                }
                
                // Initialize when DOM is ready
                function initTimer() {
                    if (document.readyState === 'loading') {
                        document.addEventListener('DOMContentLoaded', function() {
                            setTimeout(startDashboardTimer, 1000);
                        });
                    } else {
                        setTimeout(startDashboardTimer, 1000);
                    }
                }
                
                // Start the timer
                initTimer();
                
                // Also start on page navigation (for SPA behavior)
                if (window.addEventListener) {
                    window.addEventListener('hashchange', function() {
                        setTimeout(startDashboardTimer, 1000);
                    });
                }
                
            })();
        </script>
        
        <style>
            @keyframes pulse {
                0% { opacity: 1; transform: scale(1); }
                50% { opacity: 0.7; transform: scale(1.05); }
                100% { opacity: 1; transform: scale(1); }
            }
            
            .live-timer-cell {
                font-family: 'Courier New', monospace !important;
                font-weight: bold !important;
                text-align: center !important;
                min-width: 120px !important;
            }
        </style>
    </template>
</odoo>
